//Check 51 Solution if you do not understand the solution
public class Solution {
    int res =0;
    public int TotalNQueens(int n) {
        if (n == 2 || n == 3) return 0;
        solveNQueens(n);
        return res;
    }
   
    void solve(int col,int[] leftRow, int[] lowerDiagonal, int[] upperDiagonal)
    {
        if (col == leftRow.Length)
        {
            res++;
            return;
        }

        for (int row = 0; row < leftRow.Length; row++)
        {
            if (leftRow[row] == 0 && lowerDiagonal[row + col] == 0 && upperDiagonal[leftRow.Length - 1 + col - row] == 0)
            {
                leftRow[row] = 1;
                lowerDiagonal[row + col] = 1;
                upperDiagonal[leftRow.Length - 1 + col - row] = 1;
                solve(col + 1,  leftRow, lowerDiagonal, upperDiagonal);
                leftRow[row] = 0;
                lowerDiagonal[row + col] = 0;
                upperDiagonal[leftRow.Length - 1 + col - row] = 0;
            }
        }
    }

    public void solveNQueens(int n)
    {
        int[] leftRow = new int[n];
        int[] upperDiagonal = new int[2 * n - 1];
        int[] lowerDiagonal = new int[2 * n - 1];
        solve(0, leftRow, lowerDiagonal, upperDiagonal);
    }     
}
