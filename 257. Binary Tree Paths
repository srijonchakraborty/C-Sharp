/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
        List<string> resBinaryTreePaths = new List<string>();
        public IList<string> BinaryTreePaths(TreeNode root)
        {
            DFSBinaryTreePaths(root, "");
            return resBinaryTreePaths;
        }
        void DFSBinaryTreePaths(TreeNode root, string res)
        {
            if (root == null) return;
            res = res == "" ? (res + root.val) : (res + "->" + root.val);
            if (root.left == null && root.right == null)
            {
                resBinaryTreePaths.Add(res);
                return;
            }
            DFSBinaryTreePaths(root.left, res);
            DFSBinaryTreePaths(root.right, res);
        }
}
