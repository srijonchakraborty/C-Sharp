public class Solution {
    public IList<IList<string>> SolveNQueens(int n) {
        if (n == 2 || n == 3) return new List<IList<string>>(); 
        return SolveNQueens(n);
    }
     static List<string> construct(char[][] board)
        {
            List<string> res = new List<string>();
            for (int i = 0; i < board.Length; i++)
            {
                string s = new string(board[i]);
                res.Add(s);
            }
            return res;
        }
        static void solve(int col, char[][] board, IList<IList<string>> res, int[] leftRow, int[] lowerDiagonal, int[] upperDiagonal, int[] tracker, IList<int[]> trackerIndexs)
        {
            if (col == board.Length)
            {
                res.Add(construct(board));
                trackerIndexs.Add(tracker.ToArray());
                return;
            }

            for (int row = 0; row < board.Length; row++)
            {
                if (leftRow[row] == 0 && lowerDiagonal[row + col] == 0 && upperDiagonal[board.Length - 1 + col - row] == 0)
                {
                    tracker[col] = row;
                    board[row][col] = 'Q';
                    leftRow[row] = 1;
                    lowerDiagonal[row + col] = 1;
                    upperDiagonal[board.Length - 1 + col - row] = 1;
                    solve(col + 1, board, res, leftRow, lowerDiagonal, upperDiagonal, tracker, trackerIndexs);
                    board[row][col] = '.';
                    tracker[col] = -1;
                    leftRow[row] = 0;
                    lowerDiagonal[row + col] = 0;
                    upperDiagonal[board.Length - 1 + col - row] = 0;
                }
            }
        }
        public static IList<IList<string>> solveNQueens(int n)
        {
            char[][] board = new char[n][];
            //Tracker Indix Will Provide you possible combination of indexes 
            IList<int[]> trackerIndexs = new List<int[]>();
            int[] tracker = new int[n];
            for (int i = 0; i < n; i++)
            {
                board[i] = new char[n];
                for (int j = 0; j < n; j++)
                    board[i][j] = '.';

                tracker[i] = -1;
            }

            IList<IList<string>> res = new List<IList<string>>();
            int[] leftRow = new int[n];
            int[] upperDiagonal = new int[2 * n - 1];
            int[] lowerDiagonal = new int[2 * n - 1];
            solve(0, board, res, leftRow, lowerDiagonal, upperDiagonal, tracker, trackerIndexs);
            return res;
        }  
  
}
