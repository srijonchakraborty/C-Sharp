/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {
                  if (list1 == null && list2==null) return null;
            if (list1 != null && list2 == null) return list1;
            if (list1 == null && list2 != null) return list2;

            ListNode final = null;
            ListNode finalCurrent = null;

            ListNode list1Current = list1;
            ListNode list2Current = list2;

            bool fromList1 = false, fromList2 = false;
            while (list1Current!=null || list2Current != null)
            {
                fromList1 = false; 
                fromList2 = false;
                if (list1Current != null && list2Current != null)
                {
                    if(list2Current.val>list1Current.val)
                    {
                        fromList1 = true;
                    }
                    else if(list1Current.val > list2Current.val)
                    {
                        fromList2 = true;
                    }
                    else
                    {
                        fromList1 = true;
                        fromList2 = true;
                    }
                }
                else if (list1Current != null && list2Current == null)
                {
                    fromList1 = true;
                }
                else if (list1Current == null && list2Current != null)
                {
                    fromList2 = true;
                }
                else
                {
                    break;
                }
                if (fromList1)
                {
                    var temp = new ListNode();
                    temp.val = list1Current.val;

                    if (final == null)
                    {
                        final = temp;
                        finalCurrent = final;
                    }
                    else
                    {
                        finalCurrent.next = temp;
                        finalCurrent = finalCurrent.next;
                    }

                    list1Current = list1Current.next;
                }
                if (fromList2)
                {
                    var temp = new ListNode();
                    temp.val = list2Current.val;

                    if (final == null)
                    {
                        final = temp;
                        finalCurrent = final;
                    }
                    else
                    {
                        finalCurrent.next = temp;
                        finalCurrent = finalCurrent.next;
                    }

                    list2Current = list2Current.next;
                }
            }

            return final;
    }
}
